<?php

/**
 * @file
 * The private_message_messenger.module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function private_message_messenger_theme($existing, $type, $theme, $path) {
  return [
    'pmm_thread' => [
      'variables' => [
        'fallback_picture' => NULL,
        'inbox_text' => NULL,
        'delete_text' => NULL,
        'base_path' => '/',
        'thread_actions' => TRUE,
      ],
    ],
    'pmm_threads' => [
      'variables' => [
        'new_message_text' => NULL,
        'loading_text' => NULL,
      ],
    ],
    'pmm_thread_teaser' => [
      'variables' => [
        'fallback_picture' => NULL,
        'id_suffix' => NULL,
      ],
    ],
    'pmm_recent' => [
      'variables' => [
        'link_text' => '',
        'more_text' => '',
        'loading_text' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_pmm_threads().
 */
function template_preprocess_pmm_threads(&$variables) {
  $variables['#attached']['library'][] = 'private_message_messenger/threads';
  $variables['new_message_text'] = t('New Message');
  $variables['loading_text'] = t('Loading...');
}

/**
 * Implements hook_preprocess_pmm_thread().
 */
function template_preprocess_pmm_thread(&$variables) {
  $variables['#attached']['library'][] = 'private_message_messenger/thread';
  $variables['fallback_picture'] = _private_message_messenger_fallback_picture();
  $variables['inbox_text'] = t('â€¹ Inbox');
  $variables['delete_text'] = t('Delete thread');
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_pmm_thread().
 */
function template_preprocess_pmm_thread_teaser(&$variables) {
  $variables['fallback_picture'] = _private_message_messenger_fallback_picture();
}

/**
 * Implements hook_preprocess_pmm_recent().
 */
function template_preprocess_pmm_recent(&$variables) {
  $helper = \Drupal::service('private_message_messenger.messenger');
  $variables['#attached']['library'][] = 'private_message_messenger/recent';
  $variables['link_text'] = t('Messages');
  $variables['all_text'] = t('All Messages');
  $variables['loading_text'] = t('Loading...');
  $variables['url'] = $helper->getMessengerPath();
}

/**
 * Implements hook_form_private_message_config_form_alter().
 */
function private_message_messenger_form_private_message_config_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $helper = \Drupal::service('private_message_messenger.messenger');

  $form['pmm'] = [
    '#type' => 'container',
    '#weight' => 20,
    'title' => ['#markup' => '<h3>' . t('Messenger') . '</h3>'],
  ];

  // Set a default text format for messages.
  $form['pmm']['preferred_text_format'] = [
    '#type' => 'select',
    '#title' => t('Prefered text format for messages'),
    '#description' => t('You should ensure that users who have access to "use private message" can also access this format.'),
    '#default_value' => $helper->getConfig('preferred_text_format', 'plain_text'),
    '#options' => [],
  ];
  foreach (filter_formats() as $format) {
    $form['pmm']['preferred_text_format']['#options'][$format->id()] = $format->label();
  }

  // Set a default image style for messages.
  $styles = \Drupal::entityTypeManager()->getStorage('image_style')->loadMultiple();
  $form['pmm']['image_style'] = [
    '#type' => 'select',
    '#title' => t('Profile picture Image style'),
    '#description' => t('What image style is used in the messenger interface'),
    '#default_value' => $helper->getConfig('image_style', $helper::IMAGE_STYLE_DEFAULT),
    '#options' => [],
  ];
  foreach ($styles as $style) {
    $form['pmm']['image_style']['#options'][$style->id()] = $style->label();
  }

  // The default thread count to get.
  $form['pmm']['thread_count'] = [
    '#type' => 'number',
    '#title' => t('Number of threads to show'),
    '#description' => t('The number of threads to be shown in the block'),
    '#default_value' => $helper->getConfig('thread_count', $helper::THREAD_COUNT_DEFAULT),
    '#min' => 1,
  ];

  // The default ajax refresh rate.
  $form['pmm']['ajax_refresh_rate'] = [
    '#type' => 'number',
    '#title' => t('Ajax refresh rate'),
    '#default_value' => $helper->getConfig('ajax_refresh_rate', $helper::AJAX_REFRESH_DEFAULT),
    '#min' => 0,
    '#description' => t(
      'The number of seconds after which the inbox should refresh itself.
      Setting this to a low number will result in more requests to the server,
      adding overhead and bandwidth. Setting this number to zero will disable
      ajax refresh, and the inbox will only updated if/when the page is refreshed.'),
  ];

  $form['#submit'][] = 'private_message_messenger_form_private_message_config_form_submit';
}

/**
 * Submit handler for private message config form.
 */
function private_message_messenger_form_private_message_config_form_submit(&$form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('private_message.settings')
    ->set('preferred_text_format', $form_state->getValue('preferred_text_format'))
    ->set('image_style', $form_state->getValue('image_style'))
    ->set('thread_count', $form_state->getValue('thread_count'))
    ->set('ajax_refresh_rate', $form_state->getValue('ajax_refresh_rate'))
    ->save();
}

/**
 * Get the fallback image.
 *
 * @return string
 *   Path to the default image.
 */
function _private_message_messenger_fallback_picture() {
  $img = base_path() . drupal_get_path('module', 'private_message_messenger') . '/images/default-profile.jpg';
  \Drupal::moduleHandler()->alter('private_message_messenger_fallback_picture', $img);
  return $img;
}

/**
 * A wrapper to return messenger settings.
 *
 * @return array
 *   Array of settings for drupalSettings.
 */
function _private_message_messenger_get_settings() {
  $helper = \Drupal::service('private_message_messenger.messenger');
  return $helper->getSettings();
}

/**
 * Implements hook_entity_extra_field_info().
 */
function private_message_messenger_entity_extra_field_info() {
  $fields = [];

  $user_bundles = \Drupal::entityManager()->getBundleInfo('user');
  foreach (array_keys($user_bundles) as $bundle) {
    $fields['user'][$bundle]['display']['private_message_messenger_link'] = [
      'label' => t('Private message messenger thread link'),
      'description' => t('Displays a link to send a private message to the user via Messenger'),
      'visible' => FALSE,
    ];
  }

  return $fields;
}

/**
 * Implements hook_user_view().
 */
function private_message_messenger_user_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('private_message_messenger_link')) {
    $current_user = \Drupal::currentUser();
    if ($current_user->hasPermission('use private messaging system') && $current_user->id() != $entity->id()) {
      $path = 'new-' . $entity->id();
      $build['private_message_messenger_link'] = [
        '#type' => 'link',
        '#url' => Url::fromRoute('private_message_messenger.messenger', [], ['fragment' => $path]),
        '#title' => t('Send private message'),
        '#attributes' => ['class' => ['private_message_link']],
        '#prefix' => '<div class="pmm_link_wrapper">',
        '#suffix' => '</div>',
      ];
    }
  }
}
